services:
  # =============================================================================
  # DATABASE SERVICE (PostgreSQL 16)
  # =============================================================================
  db:
    image: postgres:16-alpine
    container_name: svazapp-db
    restart: unless-stopped
    # SECURITY: Database is NOT exposed to host network
    # Only accessible from other containers in svazapp-network
    # If you need external access for debugging, use:
    #   docker compose exec db psql -U svazapp
    # ports:
    #   - '5432:5432'  # DISABLED for security
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - svazapp-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # API SERVICE (Fastify Backend)
  # =============================================================================
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: svazapp-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${API_PORT}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LIVEKIT_API_KEY: ${LIVEKIT_API_KEY}
      LIVEKIT_API_SECRET: ${LIVEKIT_API_SECRET}
      LIVEKIT_URL: ${LIVEKIT_URL}
      LIVEKIT_PUBLIC_URL: ${LIVEKIT_PUBLIC_URL}
      DOMAIN: ${DOMAIN}
    networks:
      - svazapp-network
    # Note: healthcheck is defined in Dockerfile and will be used automatically

  # =============================================================================
  # FRONTEND SERVICE (Next.js PWA)
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_SOCKET_URL: ${NEXT_PUBLIC_SOCKET_URL}
        NEXT_PUBLIC_LIVEKIT_URL: ${NEXT_PUBLIC_LIVEKIT_URL}
        NEXT_PUBLIC_STUN_URL: ${NEXT_PUBLIC_STUN_URL}
        NEXT_PUBLIC_TURN_URL: ${NEXT_PUBLIC_TURN_URL}
        NEXT_PUBLIC_WEBTORRENT_TRACKERS: ${NEXT_PUBLIC_WEBTORRENT_TRACKERS}
    container_name: svazapp-frontend
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${FRONTEND_PORT}
    networks:
      - svazapp-network

  # =============================================================================
  # CADDY SERVICE (Reverse Proxy)
  # =============================================================================
  caddy:
    build:
      context: ./caddy
      dockerfile: Dockerfile
    container_name: svazapp-caddy
    restart: unless-stopped
    depends_on:
      - frontend
      - api
      - livekit
    ports:
      - '80:80'
      - '443:443'
      - '443:443/udp'  # HTTP/3
    environment:
      DOMAIN: ${DOMAIN}
      SSL_EMAIL: ${SSL_EMAIL}
      FRONTEND_PORT: ${FRONTEND_PORT}
      API_PORT: ${API_PORT}
    volumes:
      - caddy-data:/data
      - caddy-config:/config
    networks:
      - svazapp-network

  # =============================================================================
  # LIVEKIT SERVICE (SFU Server)
  # =============================================================================
  livekit:
    image: livekit/livekit-server:v1.5
    container_name: svazapp-livekit
    restart: unless-stopped
    command: --config /etc/livekit.yaml
    environment:
      LIVEKIT_API_KEY: ${LIVEKIT_API_KEY}
      LIVEKIT_API_SECRET: ${LIVEKIT_API_SECRET}
    volumes:
      - ./livekit/livekit.yaml:/etc/livekit.yaml
    networks:
      - svazapp-network

  # =============================================================================
  # COTURN SERVICE (STUN/TURN Server)
  # =============================================================================
  coturn:
    build:
      context: ./coturn
      dockerfile: Dockerfile
    container_name: svazapp-coturn
    restart: unless-stopped
    depends_on:
      caddy:
        condition: service_started
    ports:
      - '${COTURN_LISTENING_PORT}:${COTURN_LISTENING_PORT}/tcp'
      - '${COTURN_LISTENING_PORT}:${COTURN_LISTENING_PORT}/udp'
      - '${COTURN_TLS_LISTENING_PORT}:${COTURN_TLS_LISTENING_PORT}/tcp'
      - '${COTURN_TLS_LISTENING_PORT}:${COTURN_TLS_LISTENING_PORT}/udp'
      - '${COTURN_MIN_PORT}-${COTURN_MAX_PORT}:${COTURN_MIN_PORT}-${COTURN_MAX_PORT}/udp'
    environment:
      DEPLOYMENT_SCENARIO: standalone
      DOMAIN: ${DOMAIN}
      DETECT_EXTERNAL_IP: 'yes'
      DETECT_RELAY_IP: 'yes'
      REALM: ${COTURN_REALM}
      USERNAME: ${COTURN_USER}
      PASSWORD: ${COTURN_PASSWORD}
      MIN_PORT: ${COTURN_MIN_PORT}
      MAX_PORT: ${COTURN_MAX_PORT}
    volumes:
      - caddy-data:/caddy-data:ro
    networks:
      - svazapp-network

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  svazapp-network:
    driver: bridge
    name: svazapp-network

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres-data:
    name: svazapp-postgres-data
  caddy-data:
    name: svazapp-caddy-data
  caddy-config:
    name: svazapp-caddy-config

